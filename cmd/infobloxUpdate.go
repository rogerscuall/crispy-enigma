/*
Copyright Â© 2024 Roger Gomez rogerscuall@gmail.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"fmt"
	"log"
	"net"
	"os"

	ibclient "github.com/infobloxopen/infoblox-go-client/v2"
	"github.com/rogerscuall/crispy-enigma/models"

	"github.com/spf13/cobra"
)

var (
	infoURL         string
	infoUsername    string
	infoPassword    string
	infoWapiVersion string
)

// infoUpdateCmd represents the infoUpdate command
var infoUpdateCmd = &cobra.Command{
	Use:   "infobloxUpdate",
	Short: "Update Infoblox with the information of structured config YAML from AVD",
	Long: `This command will update Infoblox information based on AVD structured config YAML
	generated by a build process. This is still a work in progress.
	`,
	Run: func(cmd *cobra.Command, args []string) {
		log.Println("infoUpdate called")
		log.Println("INFOBLOX_URL:", infoURL)
		log.Println("INFOBLOX_USERNAME:", infoUsername)
		folder := cmd.Flag("folder").Value.String()
		log.Print("Folder:", folder)
		// Create a new connector
		conn, err := createConnector()
		if err != nil {
			panic(err)
		}
		defer conn.Logout()
		objMgr := ibclient.NewObjectManager(conn, "myclient", "")

		// Fetches all the .yml files in the given path
		files, err := getYmlFiles(folder)
		if err != nil {
			fmt.Println(err)
		}
		// update the information in infloblox
		for _, file := range files {
			fmt.Println("Working on file:", file)
			config, err := models.NewConfigFromYaml(file)
			if err != nil {
				log.Println("Skipping file:", file)
				log.Printf("Error: %v", err)
				continue
			}
			//update to the vlan interfaces
			for _, svi := range config.VlanInterfaces {
				log.Println("Working on SVI:", svi.Name)
				networkCIDR := svi.IpAddress
				if networkCIDR == "" {
					networkCIDR = svi.IpAddressVirtual
				}
				_, ipNet, err := net.ParseCIDR(networkCIDR)
				if err != nil {
					fmt.Println(err)
					return
				}
				log.Println(ipNet.String())
				log.Println("Network to create:", ipNet.String())
				extraAttrs := ibclient.EA{
					"Simple":  "Network",
					"Comment": "This is a comment",
				}
				infobloxNetwork, err := objMgr.CreateNetwork("default", ipNet.String(), false, svi.Description, extraAttrs)
				if err != nil {
					if isDataConflictError(err) {
						fmt.Println("Network already exists")
					} else {
						fmt.Println("Error creating network:", err)
					}
					continue
				}
				fmt.Println("Network Created: ", infobloxNetwork.Cidr)
			}
		}
	},
}

func init() {
	rootCmd.AddCommand(infoUpdateCmd)

	// Initialize global variables
	infoURL = os.Getenv("INFOBLOX_URL")
	infoUsername = os.Getenv("INFOBLOX_USERNAME")
	infoPassword = os.Getenv("INFOBLOX_PASSWORD")
	infoWapiVersion = os.Getenv("INFOBLOX_WAPI_VERSION")

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	infoUpdateCmd.Flags().StringP("folder", "f", "", "Path to the folder")
	err := infoUpdateCmd.MarkFlagRequired("folder")
	if err != nil {
		log.Fatalf("Error: %v", err)
	}

}

func createConnector() (*ibclient.Connector, error) {
	transportConfig := ibclient.NewTransportConfig("false", 20, 10)
	transportConfig.SslVerify = false
	requestBuilder := &ibclient.WapiRequestBuilder{}
	requestor := &ibclient.WapiHttpRequestor{}
	hostConfig := ibclient.HostConfig{
		Scheme:  "https",
		Host:    infoURL,
		Version: infoWapiVersion,
		Port:    "443",
	}
	authConfig := ibclient.AuthConfig{
		Username: infoUsername,
		Password: infoPassword,
	}
	conn, err := ibclient.NewConnector(hostConfig, authConfig, transportConfig, requestBuilder, requestor)
	if err != nil {
		return nil, err
	}
	return conn, nil
}
